// Generated by gencpp from file plnctrl/objInfo.msg
// DO NOT EDIT!


#ifndef PLNCTRL_MESSAGE_OBJINFO_H
#define PLNCTRL_MESSAGE_OBJINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace plnctrl
{
template <class ContainerAllocator>
struct objInfo_
{
  typedef objInfo_<ContainerAllocator> Type;

  objInfo_()
    : classes(0)
    , posX(0.0)
    , posY(0.0)
    , posZ(0.0)
    , size(0.0)
    , distance(0.0)  {
    }
  objInfo_(const ContainerAllocator& _alloc)
    : classes(0)
    , posX(0.0)
    , posY(0.0)
    , posZ(0.0)
    , size(0.0)
    , distance(0.0)  {
  (void)_alloc;
    }



   typedef int16_t _classes_type;
  _classes_type classes;

   typedef float _posX_type;
  _posX_type posX;

   typedef float _posY_type;
  _posY_type posY;

   typedef float _posZ_type;
  _posZ_type posZ;

   typedef float _size_type;
  _size_type size;

   typedef float _distance_type;
  _distance_type distance;





  typedef boost::shared_ptr< ::plnctrl::objInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plnctrl::objInfo_<ContainerAllocator> const> ConstPtr;

}; // struct objInfo_

typedef ::plnctrl::objInfo_<std::allocator<void> > objInfo;

typedef boost::shared_ptr< ::plnctrl::objInfo > objInfoPtr;
typedef boost::shared_ptr< ::plnctrl::objInfo const> objInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plnctrl::objInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plnctrl::objInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::plnctrl::objInfo_<ContainerAllocator1> & lhs, const ::plnctrl::objInfo_<ContainerAllocator2> & rhs)
{
  return lhs.classes == rhs.classes &&
    lhs.posX == rhs.posX &&
    lhs.posY == rhs.posY &&
    lhs.posZ == rhs.posZ &&
    lhs.size == rhs.size &&
    lhs.distance == rhs.distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::plnctrl::objInfo_<ContainerAllocator1> & lhs, const ::plnctrl::objInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace plnctrl

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::plnctrl::objInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plnctrl::objInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plnctrl::objInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plnctrl::objInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plnctrl::objInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plnctrl::objInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plnctrl::objInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d2cef7aa5802a9817bbcec1ed7df06d6";
  }

  static const char* value(const ::plnctrl::objInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd2cef7aa5802a981ULL;
  static const uint64_t static_value2 = 0x7bbcec1ed7df06d6ULL;
};

template<class ContainerAllocator>
struct DataType< ::plnctrl::objInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plnctrl/objInfo";
  }

  static const char* value(const ::plnctrl::objInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plnctrl::objInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16           classes\n"
"float32         posX\n"
"float32         posY\n"
"float32         posZ\n"
"float32         size\n"
"float32         distance\n"
;
  }

  static const char* value(const ::plnctrl::objInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plnctrl::objInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.classes);
      stream.next(m.posX);
      stream.next(m.posY);
      stream.next(m.posZ);
      stream.next(m.size);
      stream.next(m.distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct objInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plnctrl::objInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::plnctrl::objInfo_<ContainerAllocator>& v)
  {
    s << indent << "classes: ";
    Printer<int16_t>::stream(s, indent + "  ", v.classes);
    s << indent << "posX: ";
    Printer<float>::stream(s, indent + "  ", v.posX);
    s << indent << "posY: ";
    Printer<float>::stream(s, indent + "  ", v.posY);
    s << indent << "posZ: ";
    Printer<float>::stream(s, indent + "  ", v.posZ);
    s << indent << "size: ";
    Printer<float>::stream(s, indent + "  ", v.size);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLNCTRL_MESSAGE_OBJINFO_H
