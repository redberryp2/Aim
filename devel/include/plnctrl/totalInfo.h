// Generated by gencpp from file plnctrl/totalInfo.msg
// DO NOT EDIT!


#ifndef PLNCTRL_MESSAGE_TOTALINFO_H
#define PLNCTRL_MESSAGE_TOTALINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace plnctrl
{
template <class ContainerAllocator>
struct totalInfo_
{
  typedef totalInfo_<ContainerAllocator> Type;

  totalInfo_()
    : State(0)
    , isStop(false)
    , Speed(0.0)
    , Yaw(0.0)  {
    }
  totalInfo_(const ContainerAllocator& _alloc)
    : State(0)
    , isStop(false)
    , Speed(0.0)
    , Yaw(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _State_type;
  _State_type State;

   typedef uint8_t _isStop_type;
  _isStop_type isStop;

   typedef float _Speed_type;
  _Speed_type Speed;

   typedef float _Yaw_type;
  _Yaw_type Yaw;





  typedef boost::shared_ptr< ::plnctrl::totalInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plnctrl::totalInfo_<ContainerAllocator> const> ConstPtr;

}; // struct totalInfo_

typedef ::plnctrl::totalInfo_<std::allocator<void> > totalInfo;

typedef boost::shared_ptr< ::plnctrl::totalInfo > totalInfoPtr;
typedef boost::shared_ptr< ::plnctrl::totalInfo const> totalInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plnctrl::totalInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plnctrl::totalInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::plnctrl::totalInfo_<ContainerAllocator1> & lhs, const ::plnctrl::totalInfo_<ContainerAllocator2> & rhs)
{
  return lhs.State == rhs.State &&
    lhs.isStop == rhs.isStop &&
    lhs.Speed == rhs.Speed &&
    lhs.Yaw == rhs.Yaw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::plnctrl::totalInfo_<ContainerAllocator1> & lhs, const ::plnctrl::totalInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace plnctrl

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::plnctrl::totalInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plnctrl::totalInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plnctrl::totalInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plnctrl::totalInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plnctrl::totalInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plnctrl::totalInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plnctrl::totalInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "307b323c71a6beac17cb6e2b5ec8260e";
  }

  static const char* value(const ::plnctrl::totalInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x307b323c71a6beacULL;
  static const uint64_t static_value2 = 0x17cb6e2b5ec8260eULL;
};

template<class ContainerAllocator>
struct DataType< ::plnctrl::totalInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plnctrl/totalInfo";
  }

  static const char* value(const ::plnctrl::totalInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plnctrl::totalInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 	State\n"
"bool 	isStop\n"
"float32 Speed\n"
"float32 Yaw\n"
;
  }

  static const char* value(const ::plnctrl::totalInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plnctrl::totalInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.State);
      stream.next(m.isStop);
      stream.next(m.Speed);
      stream.next(m.Yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct totalInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plnctrl::totalInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::plnctrl::totalInfo_<ContainerAllocator>& v)
  {
    s << indent << "State: ";
    Printer<int32_t>::stream(s, indent + "  ", v.State);
    s << indent << "isStop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isStop);
    s << indent << "Speed: ";
    Printer<float>::stream(s, indent + "  ", v.Speed);
    s << indent << "Yaw: ";
    Printer<float>::stream(s, indent + "  ", v.Yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLNCTRL_MESSAGE_TOTALINFO_H
