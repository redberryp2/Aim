// Generated by gencpp from file plnctrl/objsInfo.msg
// DO NOT EDIT!


#ifndef PLNCTRL_MESSAGE_OBJSINFO_H
#define PLNCTRL_MESSAGE_OBJSINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <plnctrl/objInfo.h>

namespace plnctrl
{
template <class ContainerAllocator>
struct objsInfo_
{
  typedef objsInfo_<ContainerAllocator> Type;

  objsInfo_()
    : objNum(0)
    , data()  {
    }
  objsInfo_(const ContainerAllocator& _alloc)
    : objNum(0)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _objNum_type;
  _objNum_type objNum;

   typedef std::vector< ::plnctrl::objInfo_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::plnctrl::objInfo_<ContainerAllocator> >> _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::plnctrl::objsInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plnctrl::objsInfo_<ContainerAllocator> const> ConstPtr;

}; // struct objsInfo_

typedef ::plnctrl::objsInfo_<std::allocator<void> > objsInfo;

typedef boost::shared_ptr< ::plnctrl::objsInfo > objsInfoPtr;
typedef boost::shared_ptr< ::plnctrl::objsInfo const> objsInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plnctrl::objsInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plnctrl::objsInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::plnctrl::objsInfo_<ContainerAllocator1> & lhs, const ::plnctrl::objsInfo_<ContainerAllocator2> & rhs)
{
  return lhs.objNum == rhs.objNum &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::plnctrl::objsInfo_<ContainerAllocator1> & lhs, const ::plnctrl::objsInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace plnctrl

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::plnctrl::objsInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plnctrl::objsInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plnctrl::objsInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plnctrl::objsInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plnctrl::objsInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plnctrl::objsInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plnctrl::objsInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "519e5ac559f94c92999b0c7095c3df57";
  }

  static const char* value(const ::plnctrl::objsInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x519e5ac559f94c92ULL;
  static const uint64_t static_value2 = 0x999b0c7095c3df57ULL;
};

template<class ContainerAllocator>
struct DataType< ::plnctrl::objsInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plnctrl/objsInfo";
  }

  static const char* value(const ::plnctrl::objsInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plnctrl::objsInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32       objNum\n"
"objInfo[]   data\n"
"\n"
"================================================================================\n"
"MSG: plnctrl/objInfo\n"
"int16           classes\n"
"float32         posX\n"
"float32         posY\n"
"float32         posZ\n"
"float32         size\n"
"float32         distance\n"
;
  }

  static const char* value(const ::plnctrl::objsInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plnctrl::objsInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.objNum);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct objsInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plnctrl::objsInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::plnctrl::objsInfo_<ContainerAllocator>& v)
  {
    s << indent << "objNum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.objNum);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::plnctrl::objInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLNCTRL_MESSAGE_OBJSINFO_H
