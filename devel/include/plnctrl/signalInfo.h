// Generated by gencpp from file plnctrl/signalInfo.msg
// DO NOT EDIT!


#ifndef PLNCTRL_MESSAGE_SIGNALINFO_H
#define PLNCTRL_MESSAGE_SIGNALINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace plnctrl
{
template <class ContainerAllocator>
struct signalInfo_
{
  typedef signalInfo_<ContainerAllocator> Type;

  signalInfo_()
    : Num(0)
    , sign()  {
    }
  signalInfo_(const ContainerAllocator& _alloc)
    : Num(0)
    , sign(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _Num_type;
  _Num_type Num;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _sign_type;
  _sign_type sign;





  typedef boost::shared_ptr< ::plnctrl::signalInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plnctrl::signalInfo_<ContainerAllocator> const> ConstPtr;

}; // struct signalInfo_

typedef ::plnctrl::signalInfo_<std::allocator<void> > signalInfo;

typedef boost::shared_ptr< ::plnctrl::signalInfo > signalInfoPtr;
typedef boost::shared_ptr< ::plnctrl::signalInfo const> signalInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plnctrl::signalInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plnctrl::signalInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::plnctrl::signalInfo_<ContainerAllocator1> & lhs, const ::plnctrl::signalInfo_<ContainerAllocator2> & rhs)
{
  return lhs.Num == rhs.Num &&
    lhs.sign == rhs.sign;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::plnctrl::signalInfo_<ContainerAllocator1> & lhs, const ::plnctrl::signalInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace plnctrl

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::plnctrl::signalInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plnctrl::signalInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plnctrl::signalInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plnctrl::signalInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plnctrl::signalInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plnctrl::signalInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plnctrl::signalInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e2c6a5b3e819033d8f5f070abbb98dda";
  }

  static const char* value(const ::plnctrl::signalInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe2c6a5b3e819033dULL;
  static const uint64_t static_value2 = 0x8f5f070abbb98ddaULL;
};

template<class ContainerAllocator>
struct DataType< ::plnctrl::signalInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plnctrl/signalInfo";
  }

  static const char* value(const ::plnctrl::signalInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plnctrl::signalInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 Num\n"
"int32[] sign\n"
"\n"
;
  }

  static const char* value(const ::plnctrl::signalInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plnctrl::signalInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Num);
      stream.next(m.sign);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct signalInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plnctrl::signalInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::plnctrl::signalInfo_<ContainerAllocator>& v)
  {
    s << indent << "Num: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Num);
    s << indent << "sign[]" << std::endl;
    for (size_t i = 0; i < v.sign.size(); ++i)
    {
      s << indent << "  sign[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.sign[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLNCTRL_MESSAGE_SIGNALINFO_H
