// Generated by gencpp from file plnctrl/coeff.msg
// DO NOT EDIT!


#ifndef PLNCTRL_MESSAGE_COEFF_H
#define PLNCTRL_MESSAGE_COEFF_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace plnctrl
{
template <class ContainerAllocator>
struct coeff_
{
  typedef coeff_<ContainerAllocator> Type;

  coeff_()
    : Slope(0.0)
    , Yintercept(0.0)  {
    }
  coeff_(const ContainerAllocator& _alloc)
    : Slope(0.0)
    , Yintercept(0.0)  {
  (void)_alloc;
    }



   typedef float _Slope_type;
  _Slope_type Slope;

   typedef float _Yintercept_type;
  _Yintercept_type Yintercept;





  typedef boost::shared_ptr< ::plnctrl::coeff_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plnctrl::coeff_<ContainerAllocator> const> ConstPtr;

}; // struct coeff_

typedef ::plnctrl::coeff_<std::allocator<void> > coeff;

typedef boost::shared_ptr< ::plnctrl::coeff > coeffPtr;
typedef boost::shared_ptr< ::plnctrl::coeff const> coeffConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plnctrl::coeff_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plnctrl::coeff_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::plnctrl::coeff_<ContainerAllocator1> & lhs, const ::plnctrl::coeff_<ContainerAllocator2> & rhs)
{
  return lhs.Slope == rhs.Slope &&
    lhs.Yintercept == rhs.Yintercept;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::plnctrl::coeff_<ContainerAllocator1> & lhs, const ::plnctrl::coeff_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace plnctrl

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::plnctrl::coeff_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plnctrl::coeff_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plnctrl::coeff_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plnctrl::coeff_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plnctrl::coeff_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plnctrl::coeff_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plnctrl::coeff_<ContainerAllocator> >
{
  static const char* value()
  {
    return "79d5a347fa4ceb9a6b9ec816e2ae7406";
  }

  static const char* value(const ::plnctrl::coeff_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x79d5a347fa4ceb9aULL;
  static const uint64_t static_value2 = 0x6b9ec816e2ae7406ULL;
};

template<class ContainerAllocator>
struct DataType< ::plnctrl::coeff_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plnctrl/coeff";
  }

  static const char* value(const ::plnctrl::coeff_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plnctrl::coeff_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32    Slope\n"
"float32    Yintercept\n"
;
  }

  static const char* value(const ::plnctrl::coeff_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plnctrl::coeff_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Slope);
      stream.next(m.Yintercept);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct coeff_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plnctrl::coeff_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::plnctrl::coeff_<ContainerAllocator>& v)
  {
    s << indent << "Slope: ";
    Printer<float>::stream(s, indent + "  ", v.Slope);
    s << indent << "Yintercept: ";
    Printer<float>::stream(s, indent + "  ", v.Yintercept);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLNCTRL_MESSAGE_COEFF_H
