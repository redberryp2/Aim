// Generated by gencpp from file gpsimu_pkg/INS.msg
// DO NOT EDIT!


#ifndef GPSIMU_PKG_MESSAGE_INS_H
#define GPSIMU_PKG_MESSAGE_INS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gpsimu_pkg
{
template <class ContainerAllocator>
struct INS_
{
  typedef INS_<ContainerAllocator> Type;

  INS_()
    : heading(0.0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)  {
    }
  INS_(const ContainerAllocator& _alloc)
    : heading(0.0)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)  {
  (void)_alloc;
    }



   typedef float _heading_type;
  _heading_type heading;

   typedef float _latitude_type;
  _latitude_type latitude;

   typedef float _longitude_type;
  _longitude_type longitude;

   typedef float _altitude_type;
  _altitude_type altitude;





  typedef boost::shared_ptr< ::gpsimu_pkg::INS_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gpsimu_pkg::INS_<ContainerAllocator> const> ConstPtr;

}; // struct INS_

typedef ::gpsimu_pkg::INS_<std::allocator<void> > INS;

typedef boost::shared_ptr< ::gpsimu_pkg::INS > INSPtr;
typedef boost::shared_ptr< ::gpsimu_pkg::INS const> INSConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gpsimu_pkg::INS_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gpsimu_pkg::INS_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gpsimu_pkg::INS_<ContainerAllocator1> & lhs, const ::gpsimu_pkg::INS_<ContainerAllocator2> & rhs)
{
  return lhs.heading == rhs.heading &&
    lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.altitude == rhs.altitude;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gpsimu_pkg::INS_<ContainerAllocator1> & lhs, const ::gpsimu_pkg::INS_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gpsimu_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gpsimu_pkg::INS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gpsimu_pkg::INS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gpsimu_pkg::INS_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gpsimu_pkg::INS_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gpsimu_pkg::INS_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gpsimu_pkg::INS_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gpsimu_pkg::INS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5fc7451370d24ecdce043ba9dc43b353";
  }

  static const char* value(const ::gpsimu_pkg::INS_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5fc7451370d24ecdULL;
  static const uint64_t static_value2 = 0xce043ba9dc43b353ULL;
};

template<class ContainerAllocator>
struct DataType< ::gpsimu_pkg::INS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gpsimu_pkg/INS";
  }

  static const char* value(const ::gpsimu_pkg::INS_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gpsimu_pkg::INS_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 heading\n"
"float32 latitude\n"
"float32 longitude\n"
"float32 altitude\n"
;
  }

  static const char* value(const ::gpsimu_pkg::INS_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gpsimu_pkg::INS_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.heading);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct INS_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gpsimu_pkg::INS_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gpsimu_pkg::INS_<ContainerAllocator>& v)
  {
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    s << indent << "latitude: ";
    Printer<float>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<float>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<float>::stream(s, indent + "  ", v.altitude);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GPSIMU_PKG_MESSAGE_INS_H
