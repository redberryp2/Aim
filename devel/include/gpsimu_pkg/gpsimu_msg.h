// Generated by gencpp from file gpsimu_pkg/gpsimu_msg.msg
// DO NOT EDIT!


#ifndef GPSIMU_PKG_MESSAGE_GPSIMU_MSG_H
#define GPSIMU_PKG_MESSAGE_GPSIMU_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gpsimu_pkg
{
template <class ContainerAllocator>
struct gpsimu_msg_
{
  typedef gpsimu_msg_<ContainerAllocator> Type;

  gpsimu_msg_()
    : heading(0.0)
    , Position_E(0.0)
    , Position_N(0.0)
    , Position_U(0.0)  {
    }
  gpsimu_msg_(const ContainerAllocator& _alloc)
    : heading(0.0)
    , Position_E(0.0)
    , Position_N(0.0)
    , Position_U(0.0)  {
  (void)_alloc;
    }



   typedef float _heading_type;
  _heading_type heading;

   typedef float _Position_E_type;
  _Position_E_type Position_E;

   typedef float _Position_N_type;
  _Position_N_type Position_N;

   typedef float _Position_U_type;
  _Position_U_type Position_U;





  typedef boost::shared_ptr< ::gpsimu_pkg::gpsimu_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gpsimu_pkg::gpsimu_msg_<ContainerAllocator> const> ConstPtr;

}; // struct gpsimu_msg_

typedef ::gpsimu_pkg::gpsimu_msg_<std::allocator<void> > gpsimu_msg;

typedef boost::shared_ptr< ::gpsimu_pkg::gpsimu_msg > gpsimu_msgPtr;
typedef boost::shared_ptr< ::gpsimu_pkg::gpsimu_msg const> gpsimu_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gpsimu_pkg::gpsimu_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gpsimu_pkg::gpsimu_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gpsimu_pkg::gpsimu_msg_<ContainerAllocator1> & lhs, const ::gpsimu_pkg::gpsimu_msg_<ContainerAllocator2> & rhs)
{
  return lhs.heading == rhs.heading &&
    lhs.Position_E == rhs.Position_E &&
    lhs.Position_N == rhs.Position_N &&
    lhs.Position_U == rhs.Position_U;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gpsimu_pkg::gpsimu_msg_<ContainerAllocator1> & lhs, const ::gpsimu_pkg::gpsimu_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gpsimu_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gpsimu_pkg::gpsimu_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gpsimu_pkg::gpsimu_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gpsimu_pkg::gpsimu_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gpsimu_pkg::gpsimu_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gpsimu_pkg::gpsimu_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gpsimu_pkg::gpsimu_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gpsimu_pkg::gpsimu_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "77440f548594fa764dfaeba6047008b5";
  }

  static const char* value(const ::gpsimu_pkg::gpsimu_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x77440f548594fa76ULL;
  static const uint64_t static_value2 = 0x4dfaeba6047008b5ULL;
};

template<class ContainerAllocator>
struct DataType< ::gpsimu_pkg::gpsimu_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gpsimu_pkg/gpsimu_msg";
  }

  static const char* value(const ::gpsimu_pkg::gpsimu_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gpsimu_pkg::gpsimu_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 heading\n"
"float32 Position_E\n"
"float32 Position_N\n"
"float32 Position_U\n"
;
  }

  static const char* value(const ::gpsimu_pkg::gpsimu_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gpsimu_pkg::gpsimu_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.heading);
      stream.next(m.Position_E);
      stream.next(m.Position_N);
      stream.next(m.Position_U);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gpsimu_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gpsimu_pkg::gpsimu_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gpsimu_pkg::gpsimu_msg_<ContainerAllocator>& v)
  {
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    s << indent << "Position_E: ";
    Printer<float>::stream(s, indent + "  ", v.Position_E);
    s << indent << "Position_N: ";
    Printer<float>::stream(s, indent + "  ", v.Position_N);
    s << indent << "Position_U: ";
    Printer<float>::stream(s, indent + "  ", v.Position_U);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GPSIMU_PKG_MESSAGE_GPSIMU_MSG_H
