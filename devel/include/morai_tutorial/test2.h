// Generated by gencpp from file morai_tutorial/test2.msg
// DO NOT EDIT!


#ifndef MORAI_TUTORIAL_MESSAGE_TEST2_H
#define MORAI_TUTORIAL_MESSAGE_TEST2_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace morai_tutorial
{
template <class ContainerAllocator>
struct test2_
{
  typedef test2_<ContainerAllocator> Type;

  test2_()
    : ok(false)
    , point_x(0)
    , point_z(0.0)  {
    }
  test2_(const ContainerAllocator& _alloc)
    : ok(false)
    , point_x(0)
    , point_z(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _ok_type;
  _ok_type ok;

   typedef int32_t _point_x_type;
  _point_x_type point_x;

   typedef float _point_z_type;
  _point_z_type point_z;





  typedef boost::shared_ptr< ::morai_tutorial::test2_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::morai_tutorial::test2_<ContainerAllocator> const> ConstPtr;

}; // struct test2_

typedef ::morai_tutorial::test2_<std::allocator<void> > test2;

typedef boost::shared_ptr< ::morai_tutorial::test2 > test2Ptr;
typedef boost::shared_ptr< ::morai_tutorial::test2 const> test2ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::morai_tutorial::test2_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::morai_tutorial::test2_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::morai_tutorial::test2_<ContainerAllocator1> & lhs, const ::morai_tutorial::test2_<ContainerAllocator2> & rhs)
{
  return lhs.ok == rhs.ok &&
    lhs.point_x == rhs.point_x &&
    lhs.point_z == rhs.point_z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::morai_tutorial::test2_<ContainerAllocator1> & lhs, const ::morai_tutorial::test2_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace morai_tutorial

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::morai_tutorial::test2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::morai_tutorial::test2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_tutorial::test2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::morai_tutorial::test2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_tutorial::test2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::morai_tutorial::test2_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::morai_tutorial::test2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9898456a3461836f8bb89662ffdfc4b6";
  }

  static const char* value(const ::morai_tutorial::test2_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9898456a3461836fULL;
  static const uint64_t static_value2 = 0x8bb89662ffdfc4b6ULL;
};

template<class ContainerAllocator>
struct DataType< ::morai_tutorial::test2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "morai_tutorial/test2";
  }

  static const char* value(const ::morai_tutorial::test2_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::morai_tutorial::test2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool ok\n"
"int32 point_x\n"
"float32 point_z\n"
;
  }

  static const char* value(const ::morai_tutorial::test2_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::morai_tutorial::test2_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ok);
      stream.next(m.point_x);
      stream.next(m.point_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct test2_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::morai_tutorial::test2_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::morai_tutorial::test2_<ContainerAllocator>& v)
  {
    s << indent << "ok: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ok);
    s << indent << "point_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.point_x);
    s << indent << "point_z: ";
    Printer<float>::stream(s, indent + "  ", v.point_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MORAI_TUTORIAL_MESSAGE_TEST2_H
